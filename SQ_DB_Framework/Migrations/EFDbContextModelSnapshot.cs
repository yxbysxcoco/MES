// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;
using SQ_DB_Framework;

namespace SQ_DB_Framework.Migrations
{
    [DbContext(typeof(EFDbContext))]
    partial class EFDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("MaterialId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SuperiorDepartmentId");

                    b.HasKey("Id");

                    b.HasIndex("SuperiorDepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.OrderMaterialMap", b =>
                {
                    b.Property<int>("MaterialId");

                    b.Property<string>("OrderCode");

                    b.Property<double>("Count");

                    b.Property<DateTime>("DeliveryTime");

                    b.Property<double>("Discount");

                    b.Property<string>("Remarks");

                    b.Property<double>("UnitPrice");

                    b.HasKey("MaterialId", "OrderCode");

                    b.HasIndex("OrderCode");

                    b.ToTable("OrderMaterialMap");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.ReturnMoney", b =>
                {
                    b.Property<int>("ReturnMoneyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Mode");

                    b.Property<double>("Money");

                    b.Property<string>("OrderCode");

                    b.Property<string>("Remark");

                    b.Property<DateTime>("ReturnTime");

                    b.Property<string>("Unit");

                    b.HasKey("ReturnMoneyId");

                    b.HasIndex("OrderCode");

                    b.ToTable("ReturnMoney");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.SalesOrder", b =>
                {
                    b.Property<string>("OrderCode")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("DeliverTime");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Name");

                    b.Property<string>("ReceivingAddress");

                    b.Property<int>("SalesPersonId");

                    b.Property<int>("Status");

                    b.HasKey("OrderCode");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Department", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Department", "SuperiorDepartment")
                        .WithMany("SubsidiaryDepartments")
                        .HasForeignKey("SuperiorDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Employee", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.OrderMaterialMap", b =>
                {
                    b.HasOne("Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.SalesOrder")
                        .WithMany("OrderMaterialMaps")
                        .HasForeignKey("OrderCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.ReturnMoney", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.SalesOrder", "Order")
                        .WithMany("ReturnMoneys")
                        .HasForeignKey("OrderCode");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.SalesOrder", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.Employee", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
