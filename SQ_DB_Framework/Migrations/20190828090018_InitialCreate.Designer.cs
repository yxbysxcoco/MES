// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQ_DB_Framework;

namespace SQ_DB_Framework.Migrations
{
    [DbContext(typeof(EFDbContext))]
    [Migration("20190828090018_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MaterialTypeId");

                    b.Property<int>("MeterageUnitId");

                    b.Property<string>("Name");

                    b.Property<string>("Specifications");

                    b.HasKey("MaterialId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("MeterageUnitId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("MeterageUnit", b =>
                {
                    b.Property<int>("MeterageUnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("MeterageUnitId");

                    b.ToTable("MeterageUnit");
                });

            modelBuilder.Entity("MoneyUnit", b =>
                {
                    b.Property<int>("MoneyUnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(10);

                    b.HasKey("MoneyUnitId");

                    b.ToTable("MoneyUnit");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.DateTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("SuperiorDateTableId");

                    b.HasKey("Id");

                    b.HasIndex("SuperiorDateTableId");

                    b.ToTable("DateTable");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("SuperiorDepartmentId");

                    b.HasKey("Id");

                    b.HasIndex("SuperiorDepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentId");

                    b.Property<string>("HeadImage");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ParentMaterialTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ParentMaterialTypeId");

                    b.ToTable("MaterialType");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.OrderMaterialMap", b =>
                {
                    b.Property<int>("MaterialId");

                    b.Property<string>("OrderCode");

                    b.Property<double>("Count");

                    b.Property<DateTime>("DeliveryTime");

                    b.Property<double>("Discount");

                    b.Property<string>("Remarks");

                    b.Property<double>("UnitPrice");

                    b.HasKey("MaterialId", "OrderCode");

                    b.HasIndex("OrderCode");

                    b.ToTable("OrderMaterialMap");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.CalculationParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Attrition");

                    b.Property<int>("Cycle");

                    b.Property<int>("CycleCount");

                    b.Property<bool>("Delivergoodsed");

                    b.Property<bool>("InvName");

                    b.Property<bool>("MinBatch");

                    b.Property<bool>("NowStock");

                    b.Property<bool>("Occupancy");

                    b.Property<bool>("SafetyStock");

                    b.Property<bool>("Yield");

                    b.HasKey("Id");

                    b.ToTable("CalculationParameter");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.CalculationRange", b =>
                {
                    b.Property<int>("CalculationRangeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TypeName");

                    b.HasKey("CalculationRangeId");

                    b.ToTable("CalculationRange");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.DemandParameter", b =>
                {
                    b.Property<int>("DemandParameterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalculationRangeId");

                    b.Property<int>("DemandSourceId");

                    b.HasKey("DemandParameterId");

                    b.HasIndex("CalculationRangeId");

                    b.HasIndex("DemandSourceId");

                    b.ToTable("DemandParameter");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.DemandParameterMeterailMap", b =>
                {
                    b.Property<int>("DemandParameterId");

                    b.Property<int>("materialId");

                    b.Property<string>("SourceBill");

                    b.Property<string>("SourceType");

                    b.HasKey("DemandParameterId", "materialId");

                    b.HasIndex("materialId");

                    b.ToTable("DemandParameterMeterailMap");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.DemandParameterSalesOrderMap", b =>
                {
                    b.Property<int>("DemandParameterId");

                    b.Property<string>("OrderCode");

                    b.Property<string>("Type");

                    b.HasKey("DemandParameterId", "OrderCode");

                    b.HasIndex("OrderCode");

                    b.ToTable("DemandParameterSalesOrderMap");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.DemandSource", b =>
                {
                    b.Property<int>("DemandSourceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("DemandSourceId");

                    b.ToTable("DemandSource");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.DetailType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Describe");

                    b.HasKey("id");

                    b.ToTable("DetailType");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.PlanAccessories", b =>
                {
                    b.Property<int>("PlanAccessoriesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("PlanAccessoriesId");

                    b.ToTable("PlanAccessories");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.PlanDetailMeterailMap", b =>
                {
                    b.Property<string>("PlanCode");

                    b.Property<int>("materialId");

                    b.Property<int>("Count");

                    b.Property<int>("DetailTypeId");

                    b.Property<int?>("MeterageUnitId");

                    b.Property<int>("MeterageUnitIdId");

                    b.Property<int>("StatusId");

                    b.Property<double>("Weight");

                    b.HasKey("PlanCode", "materialId");

                    b.HasIndex("DetailTypeId");

                    b.HasIndex("MeterageUnitId");

                    b.HasIndex("StatusId");

                    b.HasIndex("materialId");

                    b.ToTable("PlanDetailMeterailMap");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.PlanMaintain", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentId");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("InstructionNumber");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OrganizationDate");

                    b.Property<string>("OrganizationDepartment");

                    b.Property<int>("PlanAccessoriesId");

                    b.Property<string>("PlanOrganization");

                    b.Property<int>("PlanTypeId");

                    b.Property<string>("Remark");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("StatusId");

                    b.HasKey("Code");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PlanAccessoriesId");

                    b.HasIndex("PlanTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("PlanMaintain");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.PlanType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PlanType");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.ProductionDemandAnalysis", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ProductionDemandSchemeCode");

                    b.Property<string>("SchemeCode");

                    b.HasKey("Code");

                    b.HasIndex("ProductionDemandSchemeCode");

                    b.ToTable("ProductionDemandAnalysis");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.ProductionDemandScheme", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalculationParameterId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DemandParameterId");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("Name");

                    b.Property<string>("Remark");

                    b.Property<int>("RunParameterId");

                    b.HasKey("Code");

                    b.HasIndex("CalculationParameterId");

                    b.HasIndex("DemandParameterId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RunParameterId");

                    b.ToTable("ProductionDemandScheme");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.RunParameter", b =>
                {
                    b.Property<int>("RunParameterId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AutomaticRun");

                    b.Property<bool>("CreatePlan");

                    b.Property<int>("PlanPeriods");

                    b.Property<string>("RunTime");

                    b.HasKey("RunParameterId");

                    b.ToTable("RunParameter");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.Status", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.Technological", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<DateTime>("OrganizationTime");

                    b.Property<string>("ProductionObject");

                    b.Property<string>("TaskTimeOrganization");

                    b.Property<DateTime>("TaskTimeOrganizationTime");

                    b.Property<string>("TechnologicalRoute");

                    b.Property<string>("Version");

                    b.HasKey("Code");

                    b.ToTable("Technological");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.WarehouseDepartmentMap", b =>
                {
                    b.Property<int>("DepartmentId");

                    b.Property<int>("WarehouseId");

                    b.Property<DateTime>("DateLimit");

                    b.HasKey("DepartmentId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseDepartmentMap");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.WarehouseEmployeeMap", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<int>("WarehouseId");

                    b.Property<DateTime>("DateLimit");

                    b.Property<string>("InventoryPeriod");

                    b.Property<string>("Schedule");

                    b.HasKey("EmployeeId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseEmployeeMap");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.WarehouseMaterialMap", b =>
                {
                    b.Property<int>("MaterialId");

                    b.Property<int>("WarehouseId");

                    b.Property<int>("Count");

                    b.HasKey("MaterialId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseMaterialMap");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.WorkOrder", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Emergency");

                    b.Property<string>("MainWorkshop");

                    b.Property<string>("Name");

                    b.Property<string>("PlanMaintainCode");

                    b.Property<string>("PrintStatus");

                    b.Property<string>("ProductionObject");

                    b.Property<string>("Remark");

                    b.Property<int>("StatusId");

                    b.Property<string>("TechnologicalCode");

                    b.Property<string>("WorkOrderOrganization");

                    b.Property<DateTime>("WorkOrderOrganizationTime");

                    b.HasKey("Code");

                    b.HasIndex("PlanMaintainCode");

                    b.HasIndex("StatusId");

                    b.HasIndex("TechnologicalCode");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.ReturnMoney", b =>
                {
                    b.Property<int>("ReturnMoneyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Mode");

                    b.Property<double>("Money");

                    b.Property<string>("OrderCode");

                    b.Property<string>("Remark");

                    b.Property<DateTime>("ReturnTime");

                    b.Property<string>("Unit");

                    b.HasKey("ReturnMoneyId");

                    b.HasIndex("OrderCode");

                    b.ToTable("ReturnMoney");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.SalesOrder", b =>
                {
                    b.Property<string>("OrderCode")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("DeliverTime");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Name");

                    b.Property<string>("ReceivingAddress");

                    b.Property<int>("SalesPersonId");

                    b.Property<int>("Status");

                    b.HasKey("OrderCode");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.ToolEquipment", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45);

                    b.Property<DateTime>("DateAdded");

                    b.Property<double>("Edition");

                    b.Property<string>("ExitNumber");

                    b.Property<double>("HighestStock");

                    b.Property<string>("InspectionCompany");

                    b.Property<double>("LowestStock");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Mark");

                    b.Property<int>("MaterialId");

                    b.Property<double>("MaxUseTime");

                    b.Property<int>("MeterageUnitId");

                    b.Property<int>("MoneyUnitId");

                    b.Property<string>("Name");

                    b.Property<string>("Remark");

                    b.Property<string>("RepairCycle");

                    b.Property<double>("RepairNumber");

                    b.Property<double>("SaveStock");

                    b.Property<string>("Standard");

                    b.Property<int>("StorehouseId");

                    b.Property<string>("Supplier");

                    b.Property<int>("TypeId");

                    b.Property<double>("Univalence");

                    b.Property<double>("Weight");

                    b.HasKey("Code");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MeterageUnitId");

                    b.HasIndex("MoneyUnitId");

                    b.HasIndex("StorehouseId");

                    b.HasIndex("TypeId");

                    b.ToTable("ToolEquipment");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PassWord");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("MaxInventory");

                    b.Property<string>("WarehouseName");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.WarehouseType", b =>
                {
                    b.Property<int>("WarehouseTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("WarehouseTypeName");

                    b.HasKey("WarehouseTypeId");

                    b.ToTable("WarehouseType");
                });

            modelBuilder.Entity("Storehouse", b =>
                {
                    b.Property<int>("StorehouseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("StorehouseId");

                    b.ToTable("Storehouse");
                });

            modelBuilder.Entity("ToolEquipmentType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TypeId");

                    b.ToTable("ToolEquipmentType");
                });

            modelBuilder.Entity("Material", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeterageUnit", "MeterageUnit")
                        .WithMany()
                        .HasForeignKey("MeterageUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.DateTable", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.DateTable", "SuperiorDateTable")
                        .WithMany("SubsidiaryDateTables")
                        .HasForeignKey("SuperiorDateTableId");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Department", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Department", "SuperiorDepartment")
                        .WithMany("SubsidiaryDepartments")
                        .HasForeignKey("SuperiorDepartmentId");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.Employee", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.MaterialType", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.MaterialType", "ParentMaterialType")
                        .WithMany("ChildrenMaterialTypes")
                        .HasForeignKey("ParentMaterialTypeId");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.OrderMaterialMap", b =>
                {
                    b.HasOne("Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.SalesOrder")
                        .WithMany("OrderMaterialMaps")
                        .HasForeignKey("OrderCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.DemandParameter", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.CalculationRange", "CalculationRange")
                        .WithMany()
                        .HasForeignKey("CalculationRangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.DemandSource", "DemandSource")
                        .WithMany()
                        .HasForeignKey("DemandSourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.DemandParameterMeterailMap", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.DemandParameter", "DemandParameter")
                        .WithMany("DemandParameterMeterailMaps")
                        .HasForeignKey("DemandParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Material", "Material")
                        .WithMany("DemandParameterMeterailMaps")
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.DemandParameterSalesOrderMap", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.DemandParameter", "DemandParameter")
                        .WithMany("DemandParameterSalesOrderMaps")
                        .HasForeignKey("DemandParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.SalesOrder", "SalesOrder")
                        .WithMany("DemandParameterSalesOrderMaps")
                        .HasForeignKey("OrderCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.PlanDetailMeterailMap", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.DetailType", "DetailType")
                        .WithMany()
                        .HasForeignKey("DetailTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeterageUnit", "MeterageUnit")
                        .WithMany()
                        .HasForeignKey("MeterageUnitId");

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.PlanMaintain", "PlanMaintain")
                        .WithMany("PlanDetailMeterailMaps")
                        .HasForeignKey("PlanCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Material", "Material")
                        .WithMany("PlanDetailMeterailMaps")
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.PlanMaintain", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.PlanAccessories", "PlanAccessories")
                        .WithMany()
                        .HasForeignKey("PlanAccessoriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.PlanType", "PlanType")
                        .WithMany()
                        .HasForeignKey("PlanTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.ProductionDemandAnalysis", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.ProductionDemandScheme", "ProductionDemandScheme")
                        .WithMany()
                        .HasForeignKey("ProductionDemandSchemeCode");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.ProductionDemandScheme", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.CalculationParameter", "CalculationParameter")
                        .WithMany()
                        .HasForeignKey("CalculationParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.DemandParameter", "DemandParameter")
                        .WithMany()
                        .HasForeignKey("DemandParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.RunParameter", "RunParameter")
                        .WithMany()
                        .HasForeignKey("RunParameterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.WarehouseDepartmentMap", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.WarehouseEmployeeMap", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.WarehouseMaterialMap", b =>
                {
                    b.HasOne("Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.PlanManagement.WorkOrder", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.PlanMaintain", "PlanMaintain")
                        .WithMany()
                        .HasForeignKey("PlanMaintainCode");

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.PlanManagement.Technological", "Technological")
                        .WithMany()
                        .HasForeignKey("TechnologicalCode");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.ReturnMoney", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.SalesOrder", "Order")
                        .WithMany("ReturnMoneys")
                        .HasForeignKey("OrderCode");
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.SalesOrder", b =>
                {
                    b.HasOne("SQ_DB_Framework.Entities.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SQ_DB_Framework.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SQ_DB_Framework.Entities.ToolEquipment", b =>
                {
                    b.HasOne("Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeterageUnit", "MeterageUnit")
                        .WithMany()
                        .HasForeignKey("MeterageUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoneyUnit", "MoneyUnit")
                        .WithMany()
                        .HasForeignKey("MoneyUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Storehouse", "Storehouse")
                        .WithMany()
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ToolEquipmentType", "ToolEquipmentType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
