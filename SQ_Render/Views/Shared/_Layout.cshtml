<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/Libs/ui/css/layui.css" />
    <script src="~/Libs/ui/layui.all.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="~/Content/materialize.min.css" />
    <link rel="stylesheet" href="~/Content/app.css" />
    @Scripts.Render("~/bundles/jquery")
    <script src="~/Scripts/materialize.min.js"></script>
    <script>
        const pushData = (options) => {
            $.ajax({
                type: options.method,
                url: options.url,
                data: options.data,
                dataType: 'JSON',
                success: res => {
                },
                error: err => {
                    console.log(err)
                    if (err.status) {
                        layer.open({
                            title: "请求发生错误",
                            content: err.responseText
                        })
                    }
                }
            })
        }

        const getData = (options, fn1) => {
            $.ajax({
                type: options.method,
                url: options.url,
                data: options.data,
                dataType: 'JSON',
                success: res => {
                    fn1(res)
                },
                error: err => {
                    console.log(err)
                    if (err.status) {
                        layer.open({
                            title: "请求发生错误",
                            content: err.responseText
                        })
                    }
                }
            })
        }

        const getFormData = (formId) => {
            let res = []
            let inputList = $("#" + formId + " input")
            for (let i = inputList.length; i--;) {
                res.push({
                    name: inputList[i].parentNode.getAttribute("id"),
                    value: inputList[i].value
                })
            }
            console.log(res)
            return res
        }

        let table = null 
        let tableDataUrl = ''
        let tableId = null
        const initTableHeader = (id, url) => {
            tableId = id
            getData({
                method: 'GET',
                url: url,
                data: {}
            }, res => {
                tableDataUrl = res.GetDataUrl
                tableDataUrl = tableDataUrl.slice(0, 4) + 's' + tableDataUrl.slice(4)
                let tableHeader = [];
                for (let i = 0; i < res.Fields.length; i++) {
                    tableHeader.push({
                        field: res.Fields[i].FieldName,
                        title: res.Fields[i].Alias,
                        sort: res.Fields[i].IsSort 
                    })
                }
                table = layui.table;
                    table.render({
                    id: "zhaosi",
                    //url: tableDataUrl,
                    elem: '#' + id,
                    height: 515,
                    cols: [tableHeader],
                    page: true,
                    limits: [10, 20],
                    cellMinWidth: 80,
                        limit: 10,
                    //parseData: function(res){ 
                    //    return {
                    //        "code": 200, 
                    //        "msg": res.List,
                    //        "count": res.TotalCount,
                    //        "data": res.List
                    //    };
                    //}
                });
                getTableBody(tableDataUrl)
            })
        }

        const getTableBody = (url) => {
            getData({
                method: 'GET',
                url: url,
                data: {}
            }, res => {
                console.log(JSON.parse(JSON.stringify(res)))
                    console.log(table)
                let reloadId = $('#' + tableId);
                table.reload("zhaosi", {
                    //page: {
                    //    curr: 1
                    //},
                    //where: {
                    //    key: {
                    //        id: reloadId.val()
                    //    }
                    //},
                    data: res.List
                },)
            })
        }
    </script>
    <title>SQ_Render</title>
</head>
<body>
    @RenderBody()
</body>
</html>
