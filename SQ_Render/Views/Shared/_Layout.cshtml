<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/Libs/ui/css/layui.css" />
    <script src="~/Libs/ui/layui.all.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    @*<link rel="stylesheet" href="~/Content/materialize.min.css" />*@
    <link rel="stylesheet" href="~/Content/app.css" />
    <script src="https://oss.sheetjs.com/js-xlsx/xlsx.full.min.js"></script>
    @Scripts.Render("~/bundles/jquery")
    <script src="~/Scripts/materialize.min.js"></script>
    <script type="text/html" id="toolbarDemo">
        <div class="layui-btn-container">
            <button class="layui-btn layui-btn-sm" lay-event="getCheckData">获取选中行数据</button>
            <button class="layui-btn layui-btn-sm" lay-event="getCheckLength">获取选中数目</button>
            <button class="layui-btn layui-btn-sm" lay-event="isAll">验证是否全选</button>
        </div>
    </script>

    <script type="text/html" id="barDemo">
        <a class="layui-btn layui-btn-xs" lay-event="edit">编辑</a>
        <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除</a>
    </script>
    <script>
        const pushData = (options) => {
            $.ajax({
                type: options.method,
                url: options.url,
                data: options.data,
                dataType: 'JSON',
                success: res => {
                },
                error: err => {
                    console.log(err)
                    if (err.status) {
                        layer.open({
                            title: "请求发生错误",
                            content: err.responseText
                        })
                    }
                }
            })
        }

        const getData = (options, fn1) => {
            $.ajax({
                type: options.method,
                url: options.url,
                data: options.data,
                dataType: 'JSON',
                success: res => {
                    fn1(res)
                },
                error: err => {
                    console.log(err)
                    if (err.status) {
                        layer.open({
                            title: "请求发生错误",
                            content: err.responseText
                        })
                    }
                }
            })
        }

        const getFormData = (formId) => {
            let res = []
            let inputList = $("#" + formId + " input")
            for (let i = inputList.length; i--;) {
                res.push({
                    name: inputList[i].parentNode.getAttribute("id"),
                    value: inputList[i].value
                })
            }
            console.log(res)
            return res
        }

        var table = null
        var tableId = null
        var tableData = [
            {
                id: 232
            },
            {
                id: 112
            },
            {
                id: 21
            },
            {
                id: 231
            },
            {
                id: 231
            },
            {
                id: 231
            },
            {
                id: 231
            },
            {
                id: 231
            },
            {
                id: 231
            },
            {
                id: 231
            },
            {
                id: 231
            },
            {
                id: 231
            },
            {
                id: 231
            },
        ]
        const initTable = (id, dataTable) => {
            var res = JSON.parse(dataTable);
            console.log(res)
            var col = [];
            for (var column of res.Columns) {
                let arr = []
                for (var field of column) {
                    arr.push({
                        title: field.Alais,
                        field: field.Name,
                        sort: field.IsSortable,
                        colspan: field.Colspan === 0 ? 1 : field.Colspan,
                        rowspan: field.Rowspan === 0 ? 1 : field.Rowspan,
                    })
                }
                col.push(arr)
            }
            console.log(col)
            if (res.Columns.length !== 1) console.log(1)
            tableId = id
            table = layui.table;
            table.render({
                id: tableId,
                elem: '#' + id,
                toolbar: '#toolbarDemo',
                title: '用户数据表',
                cols: col,
                data: res.Rows,
                page: true,
                limits: [10, 20],
                cellMinWidth: 80,
                limit: 10,
            });
            table.on('toolbar(table)', function(obj){
                var checkStatus = table.checkStatus(obj.config.id);
                switch(obj.event){
                    case 'getCheckData':
                    var data = checkStatus.data;
                    layer.alert(JSON.stringify(data));
                    break;
                    case 'getCheckLength':
                    var data = checkStatus.data;
                    layer.msg('选中了：'+ data.length + ' 个');
                    break;
                    case 'isAll':
                    layer.msg(checkStatus.isAll ? '全选': '未全选');
                    break;
                };
            });
            //监听行工具事件
            table.on('tool(table)', function(obj){
            var data = obj.data;
            if(obj.event === 'del'){
                layer.confirm('真的删除行么', function(index){
                    obj.del();
                    layer.close(index);
                });
            } else if(obj.event === 'edit'){
                layer.prompt({
                    formType: 2
                    ,value: data.email
                    }, function(value, index){
                    obj.update({
                        email: value
                    });
                    layer.close(index);
                });
            }
            });
        }
        window.onload = function () {
            var active = {
                reload: function () {
                    var demoReload = layui.$("#demoReload")
                    //执行重载
                    table.reload('t1', {
                        page: {
                            curr: 1
                        }
                        ,where: {
                            id: demoReload.val()
                        }
                    });
                }
            };
  
            layui.$('.demoTable .layui-btn').on('click', function(){
                var type = layui.$(this).data('type');
                active[type] ? active[type].call(this) : '';
            });
        }
        const handleUpload = (element) => {
            var file = element.files[0];
            var reader = new FileReader();
            reader.readAsArrayBuffer(file);
            reader.onload = (event) => {
                const data = event.target.result;
                const workbook = XLSX.read(data, { type: "array" });
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                const result = XLSX.utils.sheet_to_json(worksheet);
                const res = JSON.stringify(result);
                document.getElementById("showData").innerHTML = res;
                var header = Object.keys(result[0]);
                var arr = [];
                arr.push(header)
                for (let i = 0; i < result.length; i++) {
                    var _arr = [];
                    for (var val of result[i]) {
                        _arr.push(val)
                    }
                    arr.push(_arr);
                }
            };
        }
        const exportExcel = (element) => {
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.json_to_sheet(excel);
            XLSX.utils.book_append_sheet(wb, ws, "工作簿");
            XLSX.writeFile(wb, res.name + '.xlsx');
        }
    </script>
    <title>SQ_Render</title>
</head>
<body>
    @RenderBody()
</body>
</html>
