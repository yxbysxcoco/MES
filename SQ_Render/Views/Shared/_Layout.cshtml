<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/Libs/ui/css/layui.css" />
    <script src="~/Libs/ui/layui.all.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    @*<link rel="stylesheet" href="~/Content/materialize.min.css" />*@
    <link rel="stylesheet" href="~/Content/app.css" />
    <script src="https://oss.sheetjs.com/js-xlsx/xlsx.full.min.js"></script>
    @Scripts.Render("~/bundles/jquery")
    <script src="~/Scripts/materialize.min.js"></script>
    <script type="text/html" id="toolbar">
        <div class="layui-btn-container">
            @*<button class="layui-btn layui-btn-sm" lay-event="getCheckData">获取选中行数据</button>
            <button class="layui-btn layui-btn-sm" lay-event="getCheckLength">获取选中数目</button>
            <button class="layui-btn layui-btn-sm" lay-event="isAll">验证是否全选</button>*@
        </div>
    </script>
    <script>
        const pushData = (options) => {
            $.ajax({
                type: options.method,
                url: options.url,
                data: options.data,
                dataType: 'JSON',
                success: res => {
                },
                error: err => {
                    console.log(err)
                    if (err.status) {
                        layer.open({
                            title: "请求发生错误",
                            content: err.responseText
                        })
                    }
                }
            })
        }

        const getData = (options, fn1) => {
            $.ajax({
                type: options.method,
                url: options.url,
                data: options.data,
                dataType: 'JSON',
                success: res => {
                    fn1(res)
                },
                error: err => {
                    console.log(err)
                    if (err.status) {
                        layer.open({
                            title: "请求发生错误",
                            content: err.responseText
                        })
                    }
                }
            })
        }

        const getFormData = (formId) => {
            let res = []
            let inputList = $("#" + formId + " input")
            for (let i = inputList.length; i--;) {
                res.push({
                    name: inputList[i].parentNode.getAttribute("id"),
                    value: inputList[i].value
                })
            }
            console.log(res)
            return res
        }

        var table = null
        var tableId = null
        var tableData = []
        const initTable = (id, dataTable) => {
            var res = JSON.parse(dataTable);
            console.log(res)
            var tableHeader = [];
            for (var column of res.Columns) {
                let arr = []
                for (var field of column) {
                    if (field.Id === null) {
                        arr.push({
                            title: field.Alais,
                            field: field.Name,
                            sort: field.IsSortable,
                            colspan: field.Colspan === 0 ? 1 : field.Colspan,
                            rowspan: field.Rowspan === 0 ? 1 : field.Rowspan,
                        })
                    } else {
                        arr.push({
                            fixed: "right",
                            toolbar: "#" + field.Id,
                            title: field.Alais,
                            colspan: field.Colspan === 0 ? 1 : field.Colspan,
                            rowspan: field.Rowspan === 0 ? 1 : field.Rowspan,
                        })
                    }
                }
                tableHeader.push(arr)
            }
            tableId = id
            table = layui.table
            tableData = res.Rows

            table.render({
                id: tableId,
                elem: '#' + id,
                toolbar: '#toolbar',
                title: res.TableName,
                cols: tableHeader,
                data: res.Rows,
                page: true,
                limits: res.Limits,
                cellMinWidth: 80,
                limit: res.PageSize,
            });

            //table.on('toolbar(table)', function(obj){
            //    var checkStatus = table.checkStatus(obj.config.id);
            //    switch(obj.event){
            //        case 'getCheckData':
            //        var data = checkStatus.data;
            //        layer.alert(JSON.stringify(data));
            //        break;
            //        case 'getCheckLength':
            //        var data = checkStatus.data;
            //        layer.msg('选中了：'+ data.length + ' 个');
            //        break;
            //        case 'isAll':
            //        layer.msg(checkStatus.isAll ? '全选': '未全选');
            //        break;
            //    };
            //});
        }
    </script>
    <title>SQ_Render</title>
</head>
<body>
    @RenderBody()
</body>
</html>
